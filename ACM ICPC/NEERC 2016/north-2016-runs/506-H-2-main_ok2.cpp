#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef long double ld;

#define mp make_pair
#define pb push_back
#define sz(x) ((int) (x).size())
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#define TASK "hard"

const int inf = (int) 1.01e9;
const ld eps = 1e-9;

const int k = 2;

const int maxn = 61 + 1;

map<pair<vector<int>, vector<int> >, int> mem;

int get(vector<int> lens, vector<int> a, bool refl = 1) {
  int n0 = sz(a);
  int n = 0;
  for (int i = 0; i < n0; ++i) {
    if (lens[i] == 0) {
      continue;
    }
    if (n && a[i] == a[n - 1]) {
      lens[n - 1] += lens[i];
    } else {
      lens[n] = lens[i];
      a[n++] = a[i];
    }
  }
  lens.resize(n);
  a.resize(n);
  assert(n > 0);
  
  int pos = max_element(a.begin(), a.end()) - a.begin();
  if (a[pos] == 0) {
    return 0;
  }
  
  if (n > k) {
    return inf;
  }

  const auto &key = mp(lens, a);
  {
    auto iter = mem.find(key);
    if (iter != mem.end()) {
      return iter->second;
    }
  }
    
  int res = inf;

  if (refl && n == 1) {
    res = min(res, get(a, lens, 0));
  }
  int bests = -1;
  for (int s = 1; s <= a[pos] && s <= lens[pos]; ++s) {
    vector<int> b = a, blens = lens;
    b.insert(b.begin() + pos, a[pos] - s);
    blens.insert(blens.begin() + pos, s);
    blens[pos + 1] -= s;
    /*for (int i = 0; i < n; i++) {
      eprintf("%d ", a[i]);
    }
    eprintf("\n");
    for (int i = 0; i <= n; i++) {
      eprintf("%d ", b[i]);
    }
    eprintf("\n");
    for (int i = 0; i < n; i++) {
      eprintf("%d ", lens[i]);
    }
    eprintf("\n");
    for (int i = 0; i <= n; i++) {
      eprintf("%d ", blens[i]);
    }
    eprintf("\n");
    eprintf("\n");*/
    int cur = get(blens, b) + 1;
    if (cur < res) {
      res = cur;
      bests = s;
    }
  }
  //eprintf("bests = %d\n", bests);
  if (refl && n == 1) {
    mem[mp(a, lens)] = min(mem[mp(a, lens)], res);
  }
  /*for (int i = 0; i < n; i++) {
    eprintf("%d ", a[i]);
  } 
  eprintf("\n");
  for (int i = 0; i < n; i++) {
    eprintf("%d ", lens[i]);
  } 
  eprintf("\n");
  eprintf("%d\n\n", res);*/
  mem[key] = res;
  return res;
}
 
int dp[maxn][maxn], dp1[maxn][maxn];
int pr[maxn][maxn][2];

void precalc() {
  mem.clear();
  if (0) {
  for (int w = 1; w < maxn; ++w) {
    for (int h = 1; h < maxn; ++h) {
      int &cur = dp1[w][h];
      cur = get({w}, {h});
    }
  }
    return;
  }
  for (int w = 0; w < maxn; ++w) {
    for (int h = 0; h < maxn; ++h) {
      int &cur = dp[w][h];
      auto &curp = pr[w][h];
      cur = inf;
      if (!w || !h) {
        cur = 0;
        continue;
      }
      
      if (w == h) {
        cur = 1;
        continue;
      }
      
      for (int x = 1; x < w; ++x) {
        int val = dp[x][h] + dp[w - x][h];
        if (cur > val) {
          cur = val;
          curp[0] = 0, curp[1] = x;
        }
      }
      
      for (int x = 1; x < h; ++x) {
        int val = dp[w][x] + dp[w][h - x];
        if (cur > val) {
          cur = val;
          curp[0] = 1, curp[1] = x;
        }
      }
    }
  }
  return;
  for (int w = 1; w < maxn; ++w) {
    for (int h = 1; h < maxn; ++h) {
      if (dp[w][h] != dp1[w][h]) {
        printf("%d %d\n", w, h);
      }
    }
  }
}

int w, h;
int read() {
  if (scanf("%d%d", &w, &h) < 2) {
    return 0;
  }
  return 1;
}

int get2(vector<int> lens, vector<int> a, bool refl, int dx, int dy, int rev) {
  int n0 = sz(a);
  int n = 0;
  for (int i = 0; i < n0; ++i) {
    if (lens[i] == 0) {
      continue;
    }
    if (n && a[i] == a[n - 1]) {
      lens[n - 1] += lens[i];
    } else {
      lens[n] = lens[i];
      a[n++] = a[i];
    }
  }
  lens.resize(n);
  a.resize(n);
  assert(n > 0);
  
  int pos = max_element(a.begin(), a.end()) - a.begin();
  if (a[pos] == 0) {
    return 0;
  }
  
  if (n > k) {
    return inf;
  }

  const auto &key = mp(lens, a);
  int res = mem[key];

  int bests = -1;
  for (int s = 1; s <= a[pos] && s <= lens[pos]; ++s) {
    vector<int> b = a, blens = lens;
    b.insert(b.begin() + pos, a[pos] - s);
    blens.insert(blens.begin() + pos, s);
    blens[pos + 1] -= s;
    int cur = get(blens, b, 1) + 1;
    if (res == cur) {
      int sum = accumulate(lens.begin(), lens.begin() + pos, 0);
      if (!rev) {
        printf("%d %d %d\n", dx + sum, dy + a[pos] - s, s);
      } else {
        printf("%d %d %d\n", dx + a[pos] - s, dy + sum, s);
      }
      get2(blens, b, 1, dx, dy, rev);
      return res;
    }
  }
  if (refl && n == 1) {
    if (res == get(a, lens, 0)) {
      get2(a, lens, 0, dx, dy, !rev);
      return res;
    }
  }
  assert(0);
}

vector<int> ans1[70][70];

void gen(int w, int h, int dx, int dy) {
  if (dp[w][h] == 0) {
    return;
  }
  if (dp[w][h] == 1) {
    printf("%d %d %d\n", dx, dy, w);
    return;
  }
  int x = pr[w][h][1];
  if (pr[w][h][0] == 0) {
    gen(x, h, dx, dy);
    gen(w - x, h, dx + x, dy);
  } else {
    gen(w, x, dx, dy);
    gen(w, h - x, dx, dy + x);
  }
}

void solve() {
  if (sz(ans1[w][h])) {
    auto cur = ans1[w][h];
    int k = sz(cur) / 3;
    printf("%d\n", k);
    for (int i = 0; i < 3 * k; i += 3) {
      printf("%d %d %d\n", cur[i], cur[i + 1], cur[i + 2]);
    }
    return;
  }
  
  printf("%d\n", dp[w][h]);
  gen(w, h, 0, 0);
}

int main() {
  precalc();
ans1[11][13] = {0,9,4,4,6,7,0,5,4,4,5,1,5,0,6,0,0,5,};
ans1[11][24] = {0,20,4,4,17,7,0,16,4,4,16,1,5,11,6,0,11,5,0,0,11,};
ans1[11][35] = {0,31,4,4,28,7,0,27,4,4,27,1,5,22,6,0,22,5,0,11,11,0,0,11,};
ans1[11][46] = {0,42,4,4,39,7,0,38,4,4,38,1,5,33,6,0,33,5,0,22,11,0,11,11,0,0,11,};
ans1[11][57] = {0,53,4,4,50,7,0,49,4,4,49,1,5,44,6,0,44,5,0,33,11,0,22,11,0,11,11,0,0,11,};
ans1[13][11] = {9,0,4,6,4,7,5,0,4,5,4,1,0,5,6,0,0,5,};
ans1[13][24] = {0,11,13,9,0,4,6,4,7,5,0,4,5,4,1,0,5,6,0,0,5,};
ans1[13][37] = {0,24,13,0,11,13,9,0,4,6,4,7,5,0,4,5,4,1,0,5,6,0,0,5,};
ans1[13][50] = {0,37,13,0,24,13,0,11,13,9,0,4,6,4,7,5,0,4,5,4,1,0,5,6,0,0,5,};
ans1[17][19] = {0,13,6,6,13,6,12,14,5,12,13,1,13,10,4,0,0,13,13,6,4,13,2,4,13,0,2,15,0,2,};
ans1[17][20] = {0,14,6,6,9,11,0,8,6,6,8,1,7,8,1,8,0,9,0,0,8,};
ans1[17][37] = {0,31,6,6,26,11,0,25,6,6,25,1,7,25,1,8,17,9,0,17,8,0,0,17,};
ans1[17][54] = {0,48,6,6,43,11,0,42,6,6,42,1,7,42,1,8,34,9,0,34,8,0,17,17,0,0,17,};
ans1[19][17] = {13,0,6,13,6,6,14,12,5,13,12,1,10,13,4,0,0,13,6,13,4,2,13,4,0,13,2,0,15,2,};
ans1[19][21] = {0,17,4,4,17,4,8,10,11,0,9,8,8,9,1,9,0,10,0,0,9,};
ans1[19][36] = {0,29,7,7,24,12,0,22,7,7,22,2,9,22,2,11,16,8,0,11,11,11,8,8,0,0,11,11,0,8,};
ans1[19][40] = {0,36,4,4,36,4,8,29,11,0,28,8,8,28,1,9,19,10,0,19,9,0,0,19,};
ans1[19][55] = {0,48,7,7,43,12,0,41,7,7,41,2,9,41,2,11,35,8,0,30,11,11,27,8,0,19,11,11,19,8,0,0,19,};
ans1[19][59] = {0,55,4,4,55,4,8,48,11,0,47,8,8,47,1,9,38,10,0,38,9,0,19,19,0,0,19,};
ans1[20][17] = {14,0,6,9,6,11,8,0,6,8,6,1,8,7,1,0,8,9,0,0,8,};
ans1[20][37] = {0,17,20,14,0,6,9,6,11,8,0,6,8,6,1,8,7,1,0,8,9,0,0,8,};
ans1[20][57] = {0,37,20,0,17,20,14,0,6,9,6,11,8,0,6,8,6,1,8,7,1,0,8,9,0,0,8,};
ans1[21][19] = {17,0,4,17,4,4,10,8,11,9,0,8,9,8,1,0,9,10,0,0,9,};
ans1[21][40] = {0,19,21,17,0,4,17,4,4,10,8,11,9,0,8,9,8,1,0,9,10,0,0,9,};
ans1[22][26] = {0,18,8,8,12,14,0,10,8,8,10,2,10,0,12,0,0,10,};
ans1[22][37] = {0,29,8,8,23,14,0,21,8,8,21,2,10,11,12,0,11,10,0,0,11,11,0,11,};
ans1[22][48] = {0,40,8,8,34,14,0,32,8,8,32,2,10,22,12,0,22,10,0,0,22,};
ans1[22][59] = {0,51,8,8,45,14,0,43,8,8,43,2,10,33,12,0,33,10,0,22,11,11,22,11,0,0,22,};
ans1[23][25] = {0,17,8,8,17,8,16,18,7,16,17,1,17,12,6,0,0,17,17,6,6,17,0,6,};
ans1[23][27] = {0,19,8,8,12,15,0,11,8,8,11,1,9,11,1,10,11,1,11,0,12,0,0,11,};
ans1[23][48] = {0,40,8,8,40,8,16,41,7,16,40,1,17,35,6,0,23,17,17,29,6,17,23,6,0,0,23,};
ans1[23][50] = {0,42,8,8,35,15,0,34,8,8,34,1,9,34,1,10,34,1,11,23,12,0,23,11,0,0,23,};
ans1[24][11] = {20,0,4,17,4,7,16,0,4,16,4,1,11,5,6,11,0,5,0,0,11,};
ans1[24][13] = {11,0,13,0,9,4,4,6,7,0,5,4,4,5,1,5,0,6,0,0,5,};
ans1[24][35] = {0,11,24,20,0,4,17,4,7,16,0,4,16,4,1,11,5,6,11,0,5,0,0,11,};
ans1[24][37] = {0,13,24,11,0,13,0,9,4,4,6,7,0,5,4,4,5,1,5,0,6,0,0,5,};
ans1[24][43] = {0,36,7,7,26,17,0,29,7,0,22,7,7,22,4,11,13,13,0,11,11,11,0,13,0,0,11,};
ans1[24][59] = {0,35,24,0,11,24,20,0,4,17,4,7,16,0,4,16,4,1,11,5,6,11,0,5,0,0,11,};
ans1[25][23] = {17,0,8,17,8,8,18,16,7,17,16,1,12,17,6,0,0,17,6,17,6,0,17,6,};
ans1[25][31] = {0,27,4,4,27,4,8,14,17,0,19,8,0,11,8,8,11,3,11,0,14,0,0,11,};
ans1[25][48] = {0,23,25,17,0,8,17,8,8,18,16,7,17,16,1,12,17,6,0,0,17,6,17,6,0,17,6,};
ans1[25][56] = {0,52,4,4,52,4,8,39,17,0,44,8,0,36,8,8,36,3,11,25,14,0,25,11,0,0,25,};
ans1[26][22] = {18,0,8,12,8,14,10,0,8,10,8,2,0,10,12,0,0,10,};
ans1[26][35] = {0,22,13,13,22,13,18,0,8,12,8,14,10,0,8,10,8,2,0,10,12,0,0,10,};
ans1[26][48] = {0,22,26,18,0,8,12,8,14,10,0,8,10,8,2,0,10,12,0,0,10,};
ans1[27][23] = {19,0,8,12,8,15,11,0,8,11,8,1,11,9,1,11,10,1,0,11,12,0,0,11,};
ans1[27][29] = {0,25,4,4,25,4,8,25,4,12,14,15,0,13,12,12,13,1,13,0,14,0,0,13,};
ans1[27][50] = {0,23,27,19,0,8,12,8,15,11,0,8,11,8,1,11,9,1,11,10,1,0,11,12,0,0,11,};
ans1[27][56] = {0,52,4,4,52,4,8,52,4,12,41,15,0,40,12,12,40,1,13,27,14,0,27,13,0,0,27,};
ans1[27][59] = {0,49,10,10,42,17,0,39,10,10,39,3,13,28,14,0,26,13,13,14,14,0,13,13,13,0,14,0,0,13,};
ans1[29][27] = {25,0,4,25,4,4,25,8,4,14,12,15,13,0,12,13,12,1,0,13,14,0,0,13,};
ans1[29][31] = {0,21,10,10,21,10,20,22,9,20,21,1,21,14,8,0,0,21,21,6,8,21,0,6,27,4,2,27,2,2,27,0,2,};
ans1[29][32] = {0,26,6,6,26,6,12,15,17,0,14,12,12,14,1,13,14,1,14,0,15,0,0,14,};
ans1[29][54] = {0,47,7,7,32,22,0,40,7,0,33,7,0,26,7,7,26,6,13,16,16,0,13,13,13,0,16,0,0,13,};
ans1[29][56] = {0,27,29,25,0,4,25,4,4,25,8,4,14,12,15,13,0,12,13,12,1,0,13,14,0,0,13,};
ans1[31][25] = {27,0,4,27,4,4,14,8,17,19,0,8,11,0,8,11,8,3,0,11,14,0,0,11,};
ans1[31][29] = {21,0,10,21,10,10,22,20,9,21,20,1,14,21,8,0,0,21,6,21,8,0,21,6,4,27,2,2,27,2,0,27,2,};
ans1[31][56] = {0,25,31,27,0,4,27,4,4,14,8,17,19,0,8,11,0,8,11,8,3,0,11,14,0,0,11,};
ans1[32][29] = {26,0,6,26,6,6,15,12,17,14,0,12,14,12,1,14,13,1,0,14,15,0,0,14,};
ans1[32][59] = {0,48,11,11,38,21,0,37,11,11,17,21,0,26,11,0,15,11,11,15,2,13,15,2,15,0,17,0,0,15,};
ans1[33][39] = {0,27,12,12,18,21,0,15,12,12,15,3,15,0,18,0,0,15,};
ans1[33][50] = {0,39,11,11,39,11,22,39,11,0,27,12,12,18,21,0,15,12,12,15,3,15,0,18,0,0,15,};
ans1[34][40] = {0,28,12,12,18,22,0,16,12,12,16,2,14,16,2,16,0,18,0,0,16,};
ans1[34][57] = {0,45,12,12,35,22,0,33,12,12,33,2,14,33,2,16,17,18,0,17,16,0,0,17,17,0,17,};
ans1[35][11] = {31,0,4,28,4,7,27,0,4,27,4,1,22,5,6,22,0,5,11,0,11,0,0,11,};
ans1[35][24] = {11,0,24,0,20,4,4,17,7,0,16,4,4,16,1,5,11,6,0,11,5,0,0,11,};
ans1[35][26] = {22,0,13,22,13,13,0,18,8,8,12,14,0,10,8,8,10,2,10,0,12,0,0,10,};
ans1[35][37] = {0,33,4,4,33,4,8,33,4,12,33,4,16,18,19,0,17,16,16,17,1,17,0,18,0,0,17,};
ans1[35][59] = {0,24,35,11,0,24,0,20,4,4,17,7,0,16,4,4,16,1,5,11,6,0,11,5,0,0,11,};
ans1[36][19] = {29,0,7,24,7,12,22,0,7,22,7,2,22,9,2,16,11,8,11,0,11,8,11,8,0,0,11,0,11,8,};
ans1[37][13] = {24,0,13,11,0,13,0,9,4,4,6,7,0,5,4,4,5,1,5,0,6,0,0,5,};
ans1[37][17] = {31,0,6,26,6,11,25,0,6,25,6,1,25,7,1,17,8,9,17,0,8,0,0,17,};
ans1[37][20] = {17,0,20,0,14,6,6,9,11,0,8,6,6,8,1,7,8,1,8,0,9,0,0,8,};
ans1[37][22] = {29,0,8,23,8,14,21,0,8,21,8,2,11,10,12,11,0,10,0,0,11,0,11,11,};
ans1[37][24] = {13,0,24,0,11,13,9,0,4,6,4,7,5,0,4,5,4,1,0,5,6,0,0,5,};
ans1[37][35] = {33,0,4,33,4,4,33,8,4,33,12,4,18,16,19,17,0,16,17,16,1,0,17,18,0,0,17,};
ans1[37][41] = {0,28,13,13,28,13,26,30,11,26,28,2,28,21,9,0,0,28,28,12,9,28,3,9,28,0,3,31,0,3,34,0,3,};
ans1[37][47] = {0,41,6,6,41,6,12,41,6,18,28,19,0,23,18,18,23,5,23,14,14,0,0,23,23,0,14,};
ans1[37][50] = {0,13,37,24,0,13,11,0,13,0,9,4,4,6,7,0,5,4,4,5,1,5,0,6,0,0,5,};
ans1[37][54] = {0,17,37,31,0,6,26,6,11,25,0,6,25,6,1,25,7,1,17,8,9,17,0,8,0,0,17,};
ans1[37][57] = {0,20,37,17,0,20,0,14,6,6,9,11,0,8,6,6,8,1,7,8,1,8,0,9,0,0,8,};
ans1[37][59] = {0,22,37,29,0,8,23,8,14,21,0,8,21,8,2,11,10,12,11,0,10,0,0,11,0,11,11,};
ans1[38][42] = {0,34,8,8,34,8,16,20,22,0,18,16,16,18,2,18,0,20,0,0,18,};
ans1[38][59] = {0,50,9,9,30,29,0,41,9,0,32,9,0,23,9,9,23,7,16,23,7,23,15,15,0,0,23,23,0,15,};
ans1[39][33] = {27,0,12,18,12,21,15,0,12,15,12,3,0,15,18,0,0,15,};
ans1[39][43] = {0,35,8,8,35,8,16,20,23,0,19,16,16,19,1,17,19,1,18,19,1,19,0,20,0,0,19,};
ans1[39][46] = {0,33,13,13,33,13,26,33,13,27,0,12,18,12,21,15,0,12,15,12,3,0,15,18,0,0,15,};
ans1[39][49] = {0,27,22,22,32,17,22,27,5,27,20,12,0,0,27,27,8,12,27,0,8,35,4,4,35,0,4,};
ans1[39][59] = {0,46,13,13,33,26,0,33,13,27,0,12,18,12,21,15,0,12,15,12,3,0,15,18,0,0,15,};
ans1[40][19] = {36,0,4,36,4,4,29,8,11,28,0,8,28,8,1,19,9,10,19,0,9,0,0,19,};
ans1[40][21] = {19,0,21,0,17,4,4,17,4,8,10,11,0,9,8,8,9,1,9,0,10,0,0,9,};
ans1[40][34] = {28,0,12,18,12,22,16,0,12,16,12,2,16,14,2,0,16,18,0,0,16,};
ans1[40][59] = {0,19,40,36,0,4,36,4,4,29,8,11,28,0,8,28,8,1,19,9,10,19,0,9,0,0,19,};
ans1[41][37] = {28,0,13,28,13,13,30,26,11,28,26,2,21,28,9,0,0,28,12,28,9,3,28,9,0,28,3,0,31,3,0,34,3,};
ans1[41][43] = {0,29,14,14,29,14,28,30,13,28,29,1,29,18,12,0,0,29,29,6,12,29,0,6,35,0,6,};
ans1[41][44] = {0,38,6,6,38,6,12,38,6,18,21,23,0,20,18,18,20,1,19,20,1,20,0,21,0,0,20,};
ans1[41][47] = {0,25,22,22,28,19,22,25,3,25,12,16,0,0,25,25,0,12,37,8,4,37,4,4,37,0,4,};
ans1[41][53] = {0,44,9,9,44,9,18,30,23,0,26,18,18,26,4,22,26,4,26,15,15,0,0,26,26,0,15,};
ans1[41][55] = {0,39,16,16,30,25,0,23,16,16,23,7,23,12,18,0,0,23,23,0,12,35,6,6,35,0,6,};
ans1[42][38] = {34,0,8,34,8,8,20,16,22,18,0,16,18,16,2,0,18,20,0,0,18,};
ans1[42][59] = {0,38,21,21,38,21,34,0,8,34,8,8,20,16,22,18,0,16,18,16,2,0,18,20,0,0,18,};
ans1[43][24] = {36,0,7,26,7,17,29,0,7,22,0,7,22,7,4,13,11,13,11,0,11,0,11,13,0,0,11,};
ans1[43][39] = {35,0,8,35,8,8,20,16,23,19,0,16,19,16,1,19,17,1,19,18,1,0,19,20,0,0,19,};
ans1[43][41] = {29,0,14,29,14,14,30,28,13,29,28,1,18,29,12,0,0,29,6,29,12,0,29,6,0,35,6,};
ans1[43][47] = {0,25,22,22,26,21,22,25,1,23,25,1,24,25,1,25,8,18,0,0,25,25,0,8,33,0,8,41,6,2,41,4,2,41,2,2,41,0,2,};
ans1[43][49] = {0,34,15,15,34,15,30,36,13,30,34,2,32,34,2,34,27,9,0,0,34,34,18,9,34,9,9,34,0,9,};
ans1[44][41] = {38,0,6,38,6,6,38,12,6,21,18,23,20,0,18,20,18,1,20,19,1,0,20,21,0,0,20,};
ans1[44][52] = {0,36,16,16,24,28,0,20,16,16,20,4,20,0,24,0,0,20,};
ans1[46][11] = {42,0,4,39,4,7,38,0,4,38,4,1,33,5,6,33,0,5,22,0,11,11,0,11,0,0,11,};
ans1[46][39] = {33,0,13,33,13,13,33,26,13,0,27,12,12,18,21,0,15,12,12,15,3,15,0,18,0,0,15,};
ans1[46][50] = {0,34,16,16,34,16,32,36,14,32,34,2,34,24,12,0,0,34,34,12,12,34,0,12,};
ans1[46][54] = {0,38,16,16,24,30,0,22,16,16,22,2,18,22,2,20,22,2,22,0,24,0,0,22,};
ans1[47][37] = {41,0,6,41,6,6,41,12,6,28,18,19,23,0,18,23,18,5,14,23,14,0,0,23,0,23,14,};
ans1[47][41] = {25,0,22,28,22,19,25,22,3,12,25,16,0,0,25,0,25,12,8,37,4,4,37,4,0,37,4,};
ans1[47][43] = {25,0,22,26,22,21,25,22,1,25,23,1,25,24,1,8,25,18,0,0,25,0,25,8,0,33,8,6,41,2,4,41,2,2,41,2,0,41,2,};
ans1[47][49] = {0,33,16,16,33,16,32,34,15,32,33,1,33,20,14,0,0,33,33,6,14,33,0,6,39,0,6,45,4,2,45,2,2,45,0,2,};
ans1[47][53] = {0,29,24,24,30,23,24,29,1,25,29,1,26,29,1,27,29,1,28,29,1,29,12,18,0,0,29,29,0,12,41,6,6,41,0,6,};
ans1[47][57] = {0,53,4,4,53,4,8,53,4,12,53,4,16,26,31,0,37,16,0,21,16,16,21,5,21,0,26,0,0,21,};
ans1[48][22] = {40,0,8,34,8,14,32,0,8,32,8,2,22,10,12,22,0,10,0,0,22,};
ans1[48][23] = {40,0,8,40,8,8,41,16,7,40,16,1,35,17,6,23,0,17,29,17,6,23,17,6,0,0,23,};
ans1[48][25] = {23,0,25,0,17,8,8,17,8,16,18,7,16,17,1,17,12,6,0,0,17,17,6,6,17,0,6,};
ans1[48][26] = {22,0,26,0,18,8,8,12,14,0,10,8,8,10,2,10,0,12,0,0,10,};
ans1[49][39] = {27,0,22,32,22,17,27,22,5,20,27,12,0,0,27,8,27,12,0,27,8,4,35,4,0,35,4,};
ans1[49][43] = {34,0,15,34,15,15,36,30,13,34,30,2,34,32,2,27,34,9,0,0,34,18,34,9,9,34,9,0,34,9,};
ans1[49][47] = {33,0,16,33,16,16,34,32,15,33,32,1,20,33,14,0,0,33,6,33,14,0,33,6,0,39,6,4,45,2,2,45,2,0,45,2,};
ans1[49][55] = {0,29,26,26,32,23,26,29,3,29,12,20,0,0,29,29,0,12,41,4,8,41,0,4,45,0,4,};
ans1[50][13] = {37,0,13,24,0,13,11,0,13,0,9,4,4,6,7,0,5,4,4,5,1,5,0,6,0,0,5,};
ans1[50][23] = {42,0,8,35,8,15,34,0,8,34,8,1,34,9,1,34,10,1,23,11,12,23,0,11,0,0,23,};
ans1[50][27] = {23,0,27,0,19,8,8,12,15,0,11,8,8,11,1,9,11,1,10,11,1,11,0,12,0,0,11,};
ans1[50][33] = {39,0,11,39,11,11,39,22,11,27,0,12,18,12,21,15,0,12,15,12,3,0,15,18,0,0,15,};
ans1[50][37] = {13,0,37,0,24,13,0,11,13,9,0,4,6,4,7,5,0,4,5,4,1,0,5,6,0,0,5,};
ans1[50][46] = {34,0,16,34,16,16,36,32,14,34,32,2,24,34,12,0,0,34,12,34,12,0,34,12,};
ans1[51][57] = {0,39,18,18,39,18,36,42,15,36,39,3,39,30,12,0,0,39,39,18,12,39,6,12,39,0,6,45,0,6,};
ans1[51][60] = {0,42,18,18,27,33,0,24,18,18,24,3,21,24,3,24,0,27,0,0,24,};
ans1[52][44] = {36,0,16,24,16,28,20,0,16,20,16,4,0,20,24,0,0,20,};
ans1[53][41] = {44,0,9,44,9,9,30,18,23,26,0,18,26,18,4,26,22,4,15,26,15,0,0,26,0,26,15,};
ans1[53][47] = {29,0,24,30,24,23,29,24,1,29,25,1,29,26,1,29,27,1,29,28,1,12,29,18,0,0,29,0,29,12,6,41,6,0,41,6,};
ans1[53][59] = {0,45,14,14,45,14,28,45,14,42,48,11,42,45,3,45,40,8,0,0,45,45,32,8,45,24,8,45,16,8,45,8,8,45,0,8,};
ans1[54][17] = {48,0,6,43,6,11,42,0,6,42,6,1,42,7,1,34,8,9,34,0,8,17,0,17,0,0,17,};
ans1[54][29] = {47,0,7,32,7,22,40,0,7,33,0,7,26,0,7,26,7,6,16,13,16,13,0,13,0,13,16,0,0,13,};
ans1[54][37] = {17,0,37,0,31,6,6,26,11,0,25,6,6,25,1,7,25,1,8,17,9,0,17,8,0,0,17,};
ans1[54][46] = {38,0,16,24,16,30,22,0,16,22,16,2,22,18,2,22,20,2,0,22,24,0,0,22,};
ans1[54][58] = {0,50,8,8,50,8,16,50,8,24,28,30,0,26,24,24,26,2,26,0,28,0,0,26,};
ans1[55][19] = {48,0,7,43,7,12,41,0,7,41,7,2,41,9,2,35,11,8,30,0,11,27,11,8,19,0,11,19,11,8,0,0,19,};
ans1[55][41] = {39,0,16,30,16,25,23,0,16,23,16,7,12,23,18,0,0,23,0,23,12,6,35,6,0,35,6,};
ans1[55][49] = {29,0,26,32,26,23,29,26,3,12,29,20,0,0,29,0,29,12,4,41,8,0,41,4,0,45,4,};
ans1[55][56] = {27,0,28,27,28,28,0,52,4,4,52,4,8,52,4,12,41,15,0,40,12,12,40,1,13,27,14,0,27,13,0,0,27,};
ans1[55][59] = {0,51,8,8,51,8,16,51,8,24,28,31,0,27,24,24,27,1,25,27,1,26,27,1,27,0,28,0,0,27,};
ans1[56][25] = {52,0,4,52,4,4,39,8,17,44,0,8,36,0,8,36,8,3,25,11,14,25,0,11,0,0,25,};
ans1[56][27] = {52,0,4,52,4,4,52,8,4,41,12,15,40,0,12,40,12,1,27,13,14,27,0,13,0,0,27,};
ans1[56][29] = {27,0,29,0,25,4,4,25,4,8,25,4,12,14,15,0,13,12,12,13,1,13,0,14,0,0,13,};
ans1[56][31] = {25,0,31,0,27,4,4,27,4,8,14,17,0,19,8,0,11,8,8,11,3,11,0,14,0,0,11,};
ans1[56][55] = {0,27,28,28,27,28,52,0,4,52,4,4,52,8,4,41,12,15,40,0,12,40,12,1,27,13,14,27,0,13,0,0,27,};
ans1[57][11] = {53,0,4,50,4,7,49,0,4,49,4,1,44,5,6,44,0,5,33,0,11,22,0,11,11,0,11,0,0,11,};
ans1[57][20] = {37,0,20,17,0,20,0,14,6,6,9,11,0,8,6,6,8,1,7,8,1,8,0,9,0,0,8,};
ans1[57][34] = {45,0,12,35,12,22,33,0,12,33,12,2,33,14,2,17,16,18,17,0,16,0,0,17,0,17,17,};
ans1[57][37] = {20,0,37,0,17,20,14,0,6,9,6,11,8,0,6,8,6,1,8,7,1,0,8,9,0,0,8,};
ans1[57][47] = {53,0,4,53,4,4,53,8,4,53,12,4,26,16,31,37,0,16,21,0,16,21,16,5,0,21,26,0,0,21,};
ans1[57][51] = {39,0,18,39,18,18,42,36,15,39,36,3,30,39,12,0,0,39,18,39,12,6,39,12,0,39,6,0,45,6,};
ans1[58][54] = {50,0,8,50,8,8,50,16,8,28,24,30,26,0,24,26,24,2,0,26,28,0,0,26,};
ans1[59][19] = {55,0,4,55,4,4,48,8,11,47,0,8,47,8,1,38,9,10,38,0,9,19,0,19,0,0,19,};
ans1[59][22] = {51,0,8,45,8,14,43,0,8,43,8,2,33,10,12,33,0,10,22,0,11,22,11,11,0,0,22,};
ans1[59][24] = {35,0,24,11,0,24,0,20,4,4,17,7,0,16,4,4,16,1,5,11,6,0,11,5,0,0,11,};
ans1[59][27] = {49,0,10,42,10,17,39,0,10,39,10,3,28,13,14,26,0,13,14,13,14,13,0,13,0,13,14,0,0,13,};
ans1[59][32] = {48,0,11,38,11,21,37,0,11,17,11,21,26,0,11,15,0,11,15,11,2,15,13,2,0,15,17,0,0,15,};
ans1[59][35] = {24,0,35,0,11,24,20,0,4,17,4,7,16,0,4,16,4,1,11,5,6,11,0,5,0,0,11,};
ans1[59][37] = {22,0,37,0,29,8,8,23,14,0,21,8,8,21,2,10,11,12,0,11,10,0,0,11,11,0,11,};
ans1[59][38] = {50,0,9,30,9,29,41,0,9,32,0,9,23,0,9,23,9,7,23,16,7,15,23,15,0,0,23,0,23,15,};
ans1[59][39] = {46,0,13,33,13,26,33,0,13,0,27,12,12,18,21,0,15,12,12,15,3,15,0,18,0,0,15,};
ans1[59][40] = {19,0,40,0,36,4,4,36,4,8,29,11,0,28,8,8,28,1,9,19,10,0,19,9,0,0,19,};
ans1[59][42] = {38,0,21,38,21,21,0,34,8,8,34,8,16,20,22,0,18,16,16,18,2,18,0,20,0,0,18,};
ans1[59][53] = {45,0,14,45,14,14,45,28,14,48,42,11,45,42,3,40,45,8,0,0,45,32,45,8,24,45,8,16,45,8,8,45,8,0,45,8,};
ans1[59][55] = {51,0,8,51,8,8,51,16,8,28,24,31,27,0,24,27,24,1,27,25,1,27,26,1,0,27,28,0,0,27,};
ans1[60][51] = {42,0,18,27,18,33,24,0,18,24,18,3,24,21,3,0,24,27,0,0,24,};
  
  freopen(TASK ".out", "w", stdout);
  freopen(TASK ".in", "r", stdin);
  
  int t;
  scanf("%d", &t);
  while (read()) {
    solve();
    eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
  }
  return 0;
}